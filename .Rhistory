url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdHhNOFZiOFd5czF3c0xQUXYzeENiRVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
d <- read.csv(textConnection(url), header=TRUE)
d$dateStart <- as.Date(d$dateStart, format="%m/%d/%Y")
d$dateEnd   <- as.Date(d$dateEnd  , format="%m/%d/%Y")
d$days <- as.numeric(d$dateEnd - d$dateStart)
d$gal <- d$ccf * 748
d$avgDailyUsage <- d$gal / d$days
dWater <- d
rm(d)
tail(dWater)
freq <- 4
m <- mean(dWater$paid[seq(length(dWater$paid) - freq, length(dWater$paid))])
message(sprintf("Average amount paid in the last %.0f periods was $%.2f", freq, m))
dWater$indWasher <- "2012-07-23" < dWater$dateStart
table(dWater$indWasher)
start <- min(dWater$dateEnd)
start <- as.numeric(c(format(start, "%Y"), format(start, "%m")))
start[2] <- round(4 * (start[2] / 12))
tsWater <- ts(dWater$avgDailyUsage, frequency=4, start=start)
tsWater
tsFit <- decompose(tsWater)
plot(tsFit)
dWater$indNoDiapers <- "2011-05-08" < dWater$dateStart
table(dWater$indNoDiapers)
tsWithoutSeasonality <- tsWater - tsFit$seasonal
avgDailyUsageMinusSeasonal <- as.vector(tsWithoutSeasonality)
dWater <- data.frame(dWater, avgDailyUsageMinusSeasonal)
tail(dWater)
ggplot(dWater, aes(x=indNoDiapers, y=avgDailyUsageMinusSeasonal, color=indNoDiapers, fill=indNoDiapers)) +
geom_dotplot(binaxis="y", stackdir="center") +
geom_smooth(aes(group=1), color="black", method="lm") +
scale_x_discrete(label=c("Still using", "No longer using")) +
labs(title="Water Usage\nafter subtracting seasonal component", x="Cloth diapers", y="Average daily usage (gal)") +
theme(legend.position="none")
ttestWater <- t.test(avgDailyUsageMinusSeasonal ~ indNoDiapers, dWater)
ttestWater
wilcox.test(avgDailyUsageMinusSeasonal ~ indNoDiapers, dWater)
require(forecast, quietly=TRUE)
f <- forecast(tsWater)
plot(f)
?digits
??digits
packages <- c("RCurl", "plotKML", "geosphere", "ggmap", "ggplot2", "RColorBrewer", "data.table")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdFBUYk4wb0UyYlUweHg1SHlfX3VHV1E&single=true&gid=1&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
dfWaypoints <- read.csv(textConnection(url), header=TRUE)
dfWaypoints
packages <- c("RCurl", "plotKML", "geosphere", "ggmap", "ggplot2", "RColorBrewer", "data.table", "sp", "xtable")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdFBUYk4wb0UyYlUweHg1SHlfX3VHV1E&single=true&gid=1&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
dfWaypoints <- read.csv(textConnection(url), header=TRUE)
print(xtable(rbind(head(dfWaypoints), tail(dfWaypoints)), digits=7), type="html")
?stop
?rbind
packages <- c("data.table", "ggplot2", "xtable", "VIM")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
?rbind
options(rpubs.upload.method = "internal")
source('~/.active-rstudio-document', echo=TRUE)
str(tabulationStateCategory)
levels(tabulationStateCategory$eventCategory)
install.packages{R2jags}
install.packages("R2jags")
install.packages("metafor")
require(R2jags)
?jags
require(R2jags, quietly=TRUE)
study <- c('AGE', 'CNBSS-1', 'HIP', 'Gothenburg', 'Stockholm', 'Malmo', 'Kopparberg', 'Ostergotland')
yInt   <- c(    105,    105,     64,     34,     34,     53,     22,     31)
nInt   <- c(  53884,  25214,  13740,  11724,  14303,  13568,   9582,  10285)
pyInt  <- c( 578390, 282606, 192360,     NA, 203000, 184000, 124566, 172000)
yCntl  <- c(    251,    108,     82,     59,     13,     66,     16,     30)
nCntl  <- c( 106956,  25216,  13740,  14217,   8021,  12279,   5031,  10459)
pyCntl <- c(1149380, 282575, 192360,     NA, 117000, 160000,  65403, 176000)
n <- 10000
rateInt  <- n * yInt  / nInt
rateCntl <- n * yCntl / nCntl
rr <- rateInt / rateCntl
rd <- rateInt - rateCntl
nns <- 1 / ((yCntl / nCntl) - (yInt / nInt))
D <- data.frame(study,
yInt , nInt , pyInt , rateInt ,
yCntl, nCntl, pyCntl, rateCntl,
rr, rd, nns)
D
cat("
model
{
for( i in 1 : n ) {
z[i] ~ dnorm(0, 1)
logit(pInt[i] ) <- alpha + beta + sigma * z[i]
logit(pCntl[i]) <- alpha        + sigma * z[i]
yInt[i]  ~ dbin(pInt[i] , nInt[i] )
yCntl[i] ~ dbin(pCntl[i], nCntl[i])
}
alpha ~ dnorm(-5.0, 1.0E-1)
beta  ~ dnorm(0.0, 1.0E-1)
sigma ~ dnorm( 0.5, 1.0E-1) I(0, )
# sigma ~ dgamma(0.001, 0.001)
}
",
file="modelMetaAnalysis.txt")
DJags <- list(n=nrow(D), yInt=D$yInt, nInt=D$nInt, yCntl=D$yCntl, nCntl=D$nCntl)
inits <- function() {list("alpha"=0, "beta"=0, "sigma"=0, "z"=rep(0, nrow(D)))}
params <- c("alpha", "beta", "sigma")
set.seed(as.numeric(as.Date("2014-08-27")))
system.time(M <- jags(DJags, inits, params, model.file="modelMetaAnalysis.txt", n.iter=50000))
mcmc <- as.mcmc(M)
densityplot(mcmc)
xyplot(mcmc)
?xyplot
xyplot(mcmc, alpha=1/3)
names(mcmc)
?as.mcmc
head(mcmc)
dim(mcmc)
NROW(mcmc)
NCOL(mcmc)
nrow(mcmc)
?NROW
Mmcmc <- as.mcmc(M)
xyplot(Mmcmc, alpha=NROW(Mmcmc))
M
plot(M)
Mmcmc <- as.mcmc(M)
xyplot(Mmcmc, alpha=NROW(Mmcmc))
xyplot(Mmcmc, alpha=1/3)
NROW(Mmcmc)
xyplot(Mmcmc, alpha=1/M$BUGSoutput$n.chains)
densityplot(Mmcmc, alpha=1/M$BUGSoutput$n.chains)
densityplot(Mmcmc)
xyplot(Mmcmc)
dotplot(Mmcmc)
require(data.table)
n <- 1E4
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(x = rnorm(n), y=runif(n))
install.packages("data.table")
require(data.table)
n <- 1E4
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(x = rnorm(n), y=runif(n))
system.time(rbind(D1, D2))
system.time(rbindlist(list(D1, D2)))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
identical(D3, D4)
message(sprintf("Are the objects returned from rbind and rbindlist identical? %s", identical(D3, D4)))
require(data.table)
n <- 1E4
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(y = rnorm(n), x=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
message(sprintf("Are the objects returned from rbind and rbindlist identical? %s", identical(D3, D4)))
require(data.table)
n <- 1E4
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(y = rnorm(n), z=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
require(data.table)
n <- 1E6
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(y = rnorm(n), x=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
message(sprintf("Are the objects returned from rbind and rbindlist identical? %s", identical(D3, D4)))
require(data.table)
n <- 1E7
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(y = rnorm(n), x=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
message(sprintf("Are the objects returned from rbind and rbindlist identical? %s", identical(D3, D4)))
require(data.table)
n <- 1E7
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(x = rnorm(n), y=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
require(data.table)
n <- 1E8
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(x = rnorm(n), y=runif(n))
gc()
require(data.table)
n <- 1E7
D1 <- data.table(x = rnorm(n), y=runif(n))
D2 <- data.table(x = rnorm(n), y=runif(n))
system.time(D3 <- rbind(D1, D2))
system.time(D4 <- rbindlist(list(D1, D2)))
message(sprintf("Are the objects returned from rbind and rbindlist identical? %s", identical(D3, D4)))
require(data.table)
help(data.table)
setwd("~/GitHub repositories/FacebookNetworkAnalysis")
require(igraph, quietly=TRUE)
G <- read.graph(file="ChanFacebook.gml", format="gml")
setwd("~/GitHub repositories/FacebookNetworkAnalysis")
listName <- strsplit(V(G)$label, " ")
nameF <- sapply(listName, head, 1)
nameL <- sapply(listName, tail, 1)
initF <- substr(nameF, 1, 1)
initL <- substr(nameL, 1, 1)
initials <- paste0(initF, initL)
label <- nameF
head(label)
deg <- degree(G)
summary(deg)
require(xtable, quietly=TRUE)
lim <- sort(deg, decreasing=TRUE)[round(vcount(G) * 0.05)]
top <- data.frame("Name"=V(G)$label, "Degree"=deg)
top <- subset(top, deg >= lim)
top <- top[order(top$Degree, decreasing=TRUE),]
print(xtable(top, digits=0), type="html", include.rownames=FALSE)
close <- closeness(G)
summary(close)
require(ggplot2, quietly=TRUE)
btwn <- betweenness(G)
summary(btwn)
qplot(btwn, binwidth=1000)
rank <- length(btwn) - rank(btwn) + 1
top <- data.frame("Rank"=rank, "Name"=V(G)$label, "Betweenness"=btwn)
lim <- sort(btwn, decreasing=TRUE)[round(vcount(G) * 0.05)]
# top <- subset(top, btwn >= lim)
top <- subset(top, rank <= 25)
top <- top[order(top$Betweenness, decreasing=TRUE),]
print(xtable(top, digits=0), type="html")
rsq <- format(cor(deg, btwn) ^2, digits=3)
cntrl <- data.frame(deg, btwn, close)
ggplot(cntrl, aes(x=deg, y=btwn)) +
geom_jitter(alpha=1/2) +
scale_y_log10() +
labs(x="Degree", y="Betweenness") +
annotate("text", label=paste("R-sq =", rsq), x=+Inf, y=1, hjust=1)
C <- edge.betweenness.community(G)
sizesOrdered <- sizes(C)[order(sizes(C), decreasing=TRUE)]
sizesOrdered
maxComm <- 11
commThreshold <- sizesOrdered[maxComm]
C$membership[!(C$membership %in% as.numeric(names(sizesOrdered[1:maxComm])))] <- 999
C$membership <- unclass(factor(C$membership))
table(C$membership)
q <- quantile(btwn, probs=c(0, 0.75, 0.9, 0.95, 0.975, 0.99, 1))
size <- cut(btwn, breaks=q, include.lowest=TRUE, dig.lab=5)
summary(size)
V(G)$size <- unclass(size)
labNode <- nameF
labNode[labNode == "Marc"] <- paste(labNode[labNode == "Marc"], initL[labNode == "Marc"])  # Since there's 2 Marcs, paste their last initial to the label
rankWithin <- ave(btwn, C$membership, FUN=function(x) length(x) - rank(x) + 1)
pctWithin <- 7
topWithin <- round(pctWithin / 100 * sizes(C))
message(sprintf("The top %3.1f%% within each community leads to labelling %2.0f nodes.", pctWithin, sum(topWithin)))
# Need to find a more elegant way to do this
isLabelled1  <- C$membership ==  1 & rankWithin <= topWithin[ 1]
isLabelled2  <- C$membership ==  2 & rankWithin <= topWithin[ 2]
isLabelled3  <- C$membership ==  3 & rankWithin <= topWithin[ 3]
isLabelled4  <- C$membership ==  4 & rankWithin <= topWithin[ 4]
isLabelled5  <- C$membership ==  5 & rankWithin <= topWithin[ 5]
isLabelled6  <- C$membership ==  6 & rankWithin <= topWithin[ 6]
isLabelled7  <- C$membership ==  7 & rankWithin <= topWithin[ 7]
isLabelled8  <- C$membership ==  8 & rankWithin <= topWithin[ 8]
isLabelled9  <- C$membership ==  9 & rankWithin <= topWithin[ 9]
isLabelled10 <- C$membership == 10 & rankWithin <= topWithin[10]
isLabelled11 <- C$membership == 11 & rankWithin <= topWithin[11]
isLabelled12 <- C$membership == 12 & rankWithin <= topWithin[12]
isLabelled <- isLabelled1 | isLabelled2 | isLabelled3 | isLabelled4 | isLabelled5 | isLabelled6 | isLabelled7 | isLabelled8 | isLabelled9 | isLabelled10 | isLabelled11 | isLabelled12
labNode[!isLabelled] <- NA
# labNode[C$membership != 5 & nameF != "Cat"] <- NA
labNode[isLabelled12]
nameF[nameF %in% c("Cat", "Jackie", "Moi")]
nameF[grep("Cat|Jackie|Moi", nameF)]
nameF[grep("Cat$|Jackie|Moi", nameF)]
labNode <- nameF
labNode[labNode == "Marc"] <- paste(labNode[labNode == "Marc"], initL[labNode == "Marc"])  # Since there's 2 Marcs, paste their last initial to the label
rankWithin <- ave(btwn, C$membership, FUN=function(x) length(x) - rank(x) + 1)
pctWithin <- 7
topWithin <- round(pctWithin / 100 * sizes(C))
message(sprintf("The top %3.1f%% within each community leads to labelling %2.0f nodes.", pctWithin, sum(topWithin)))
# Need to find a more elegant way to do this
isLabelled1  <- C$membership ==  1 & rankWithin <= topWithin[ 1]
isLabelled2  <- C$membership ==  2 & rankWithin <= topWithin[ 2]
isLabelled3  <- C$membership ==  3 & rankWithin <= topWithin[ 3]
isLabelled4  <- C$membership ==  4 & rankWithin <= topWithin[ 4]
isLabelled5  <- C$membership ==  5 & rankWithin <= topWithin[ 5]
isLabelled6  <- C$membership ==  6 & rankWithin <= topWithin[ 6]
isLabelled7  <- C$membership ==  7 & rankWithin <= topWithin[ 7]
isLabelled8  <- C$membership ==  8 & rankWithin <= topWithin[ 8]
isLabelled9  <- C$membership ==  9 & rankWithin <= topWithin[ 9]
isLabelled10 <- C$membership == 10 & rankWithin <= topWithin[10]
isLabelled11 <- C$membership == 11 & rankWithin <= topWithin[11]
isLabelled12 <- C$membership == 12 & rankWithin <= topWithin[12]
isLabelled <- isLabelled1 | isLabelled2 | isLabelled3 | isLabelled4 | isLabelled5 | isLabelled6 | isLabelled7 | isLabelled8 | isLabelled9 | isLabelled10 | isLabelled11 | isLabelled12 | grepl("Cat$|Jackie|Moi", nameF)
labNode[!isLabelled] <- NA
# labNode[C$membership != 5 & nameF != "Cat"] <- NA
labNode[isLabelled]
P <- function(vertex.label.cex=1, vertex.label.color="#0000007F") {
set.seed(seed)
plot(C, G,
vertex.label=labNode,
vertex.label.color=vertex.label.color,
vertex.label.dist=1/4,
vertex.label.family="sans",
vertex.label.cex=vertex.label.cex,
vertex.frame.color=NA,
colbar=node.color,
mark.groups=NA,
mark.col=NA,
mark.border=palette,
edge.color=c("gray", "red")[crossing(C, G)+1],
edge.width=1/2
)
}
id <- communities(C)[1:maxComm]
require(RColorBrewer, quietly=TRUE)
palette <- c(brewer.pal(maxComm, "Spectral"), "gray")
node.color <- c(palette[1:maxComm], rep(palette[maxComm + 1], max(C$membership) - maxComm))
seed <- file.info("ChanFacebook.gml")$mtime
P(vertex.label.cex=1)
P <- function(vertex.label.cex=1, vertex.label.color="#0000007F") {
set.seed(seed)
plot(C, G,
vertex.label=labNode,
vertex.label.color=vertex.label.color,
vertex.label.dist=1/4,
vertex.label.family="sans",
vertex.label.cex=vertex.label.cex,
vertex.frame.color=NA,
colbar=node.color,
mark.groups=NA,
mark.col=NA,
mark.border=palette,
edge.color=c("#0000007F", "#FF00007F")[crossing(C, G)+1],
edge.width=1/2
)
}
id <- communities(C)[1:maxComm]
require(RColorBrewer, quietly=TRUE)
palette <- c(brewer.pal(maxComm, "Spectral"), "gray")
node.color <- c(palette[1:maxComm], rep(palette[maxComm + 1], max(C$membership) - maxComm))
seed <- file.info("ChanFacebook.gml")$mtime
P(vertex.label.cex=1)
setwd("~/GitHub repositories/FacebookNetworkAnalysis")
require(igraph, quietly=TRUE)
G <- read.graph(file="ChanFacebook.gml", format="gml")
listName <- strsplit(V(G)$label, " ")
nameF <- sapply(listName, head, 1)
nameL <- sapply(listName, tail, 1)
initF <- substr(nameF, 1, 1)
initL <- substr(nameL, 1, 1)
initials <- paste0(initF, initL)
label <- nameF
head(label)
deg <- degree(G)
summary(deg)
require(xtable, quietly=TRUE)
lim <- sort(deg, decreasing=TRUE)[round(vcount(G) * 0.05)]
top <- data.frame("Name"=V(G)$label, "Degree"=deg)
top <- subset(top, deg >= lim)
top <- top[order(top$Degree, decreasing=TRUE),]
print(xtable(top, digits=0), type="html", include.rownames=FALSE)
close <- closeness(G)
summary(close)
require(ggplot2, quietly=TRUE)
btwn <- betweenness(G)
summary(btwn)
qplot(btwn, binwidth=1000)
rank <- length(btwn) - rank(btwn) + 1
top <- data.frame("Rank"=rank, "Name"=V(G)$label, "Betweenness"=btwn)
lim <- sort(btwn, decreasing=TRUE)[round(vcount(G) * 0.05)]
# top <- subset(top, btwn >= lim)
top <- subset(top, rank <= 25)
top <- top[order(top$Betweenness, decreasing=TRUE),]
print(xtable(top, digits=0), type="html")
rsq <- format(cor(deg, btwn) ^2, digits=3)
cntrl <- data.frame(deg, btwn, close)
ggplot(cntrl, aes(x=deg, y=btwn)) +
geom_jitter(alpha=1/2) +
scale_y_log10() +
labs(x="Degree", y="Betweenness") +
annotate("text", label=paste("R-sq =", rsq), x=+Inf, y=1, hjust=1)
C <- edge.betweenness.community(G)
sizesOrdered <- sizes(C)[order(sizes(C), decreasing=TRUE)]
sizesOrdered
maxComm <- 11
commThreshold <- sizesOrdered[maxComm]
C$membership[!(C$membership %in% as.numeric(names(sizesOrdered[1:maxComm])))] <- 999
C$membership <- unclass(factor(C$membership))
table(C$membership)
q <- quantile(btwn, probs=c(0, 0.75, 0.9, 0.95, 0.975, 0.99, 1))
size <- cut(btwn, breaks=q, include.lowest=TRUE, dig.lab=5)
summary(size)
V(G)$size <- unclass(size)
labNode <- nameF
labNode[labNode == "Marc"] <- paste(labNode[labNode == "Marc"], initL[labNode == "Marc"])  # Since there's 2 Marcs, paste their last initial to the label
rankWithin <- ave(btwn, C$membership, FUN=function(x) length(x) - rank(x) + 1)
pctWithin <- 7
topWithin <- round(pctWithin / 100 * sizes(C))
message(sprintf("The top %3.1f%% within each community leads to labelling %2.0f nodes.", pctWithin, sum(topWithin)))
# Need to find a more elegant way to do this
isLabelled1  <- C$membership ==  1 & rankWithin <= topWithin[ 1]
isLabelled2  <- C$membership ==  2 & rankWithin <= topWithin[ 2]
isLabelled3  <- C$membership ==  3 & rankWithin <= topWithin[ 3]
isLabelled4  <- C$membership ==  4 & rankWithin <= topWithin[ 4]
isLabelled5  <- C$membership ==  5 & rankWithin <= topWithin[ 5]
isLabelled6  <- C$membership ==  6 & rankWithin <= topWithin[ 6]
isLabelled7  <- C$membership ==  7 & rankWithin <= topWithin[ 7]
isLabelled8  <- C$membership ==  8 & rankWithin <= topWithin[ 8]
isLabelled9  <- C$membership ==  9 & rankWithin <= topWithin[ 9]
isLabelled10 <- C$membership == 10 & rankWithin <= topWithin[10]
isLabelled11 <- C$membership == 11 & rankWithin <= topWithin[11]
isLabelled12 <- C$membership == 12 & rankWithin <= topWithin[12]
isLabelled <- isLabelled1 | isLabelled2 | isLabelled3 | isLabelled4 | isLabelled5 | isLabelled6 | isLabelled7 | isLabelled8 | isLabelled9 | isLabelled10 | isLabelled11 | isLabelled12
# isLabelledOther <- grepl("Cat$|Jackie|Moi", nameF)
# isLabelled <- isLabelled | isLabelledOther
labNode[!isLabelled] <- NA
# labNode[C$membership != 5 & nameF != "Cat"] <- NA
P <- function(vertex.label.cex=1, vertex.label.color="#0000007F") {
set.seed(seed)
plot(C, G,
vertex.label=labNode,
vertex.label.color=vertex.label.color,
vertex.label.dist=1/4,
vertex.label.family="sans",
vertex.label.cex=vertex.label.cex,
vertex.frame.color=NA,
colbar=node.color,
mark.groups=NA,
mark.col=NA,
mark.border=palette,
edge.color=c("#0000007F", "#FF00007F")[crossing(C, G)+1],
edge.width=1/2
)
}
id <- communities(C)[1:maxComm]
require(RColorBrewer, quietly=TRUE)
palette <- c(brewer.pal(maxComm, "Spectral"), "gray")
node.color <- c(palette[1:maxComm], rep(palette[maxComm + 1], max(C$membership) - maxComm))
seed <- file.info("ChanFacebook.gml")$mtime
P(vertex.label.cex=1)
P <- function(vertex.label.cex=1, vertex.label.color="#0000007F") {
set.seed(seed)
plot(C, G,
vertex.label=labNode,
vertex.label.color=vertex.label.color,
vertex.label.dist=1/4,
vertex.label.family="sans",
vertex.label.cex=vertex.label.cex,
vertex.frame.color=NA,
colbar=node.color,
mark.groups=NA,
mark.col=NA,
mark.border=palette,
edge.color=c("#7F7F7F7F", "#FF00007F")[crossing(C, G)+1],
edge.width=1/2
)
}
id <- communities(C)[1:maxComm]
require(RColorBrewer, quietly=TRUE)
palette <- c(brewer.pal(maxComm, "Spectral"), "gray")
node.color <- c(palette[1:maxComm], rep(palette[maxComm + 1], max(C$membership) - maxComm))
seed <- file.info("ChanFacebook.gml")$mtime
P(vertex.label.cex=1)
P <- function(vertex.label.cex=1, vertex.label.color="#0000007F") {
set.seed(seed)
plot(C, G,
vertex.label=labNode,
vertex.label.color=vertex.label.color,
vertex.label.dist=1/4,
vertex.label.family="sans",
vertex.label.cex=vertex.label.cex,
vertex.frame.color=NA,
colbar=node.color,
mark.groups=NA,
mark.col=NA,
mark.border=palette,
edge.color=c("#7F7F7FBF", "#FF0000BF")[crossing(C, G)+1],
edge.width=1/2
)
}
id <- communities(C)[1:maxComm]
require(RColorBrewer, quietly=TRUE)
palette <- c(brewer.pal(maxComm, "Spectral"), "gray")
node.color <- c(palette[1:maxComm], rep(palette[maxComm + 1], max(C$membership) - maxComm))
seed <- file.info("ChanFacebook.gml")$mtime
P(vertex.label.cex=1)
P <- function(vertex.label.cex=1, vertex.label.color="#0000007F") {
set.seed(seed)
plot(C, G,
vertex.label=labNode,
vertex.label.color=vertex.label.color,
vertex.label.dist=1/4,
vertex.label.family="sans",
vertex.label.cex=vertex.label.cex,
vertex.frame.color=NA,
colbar=node.color,
mark.groups=NA,
mark.col=NA,
mark.border=palette,
edge.color=c("#7F7F7F3F", "#FF00003F")[crossing(C, G)+1],
edge.width=1/2
)
}
id <- communities(C)[1:maxComm]
require(RColorBrewer, quietly=TRUE)
palette <- c(brewer.pal(maxComm, "Spectral"), "gray")
node.color <- c(palette[1:maxComm], rep(palette[maxComm + 1], max(C$membership) - maxComm))
seed <- file.info("ChanFacebook.gml")$mtime
P(vertex.label.cex=1)
require(rmarkdown)
render(file.path(getwd(), "FacebookNetwork.Rmd"), output_format="html_document")
file.rename(file.path(getwd(), "FacebookNetwork.md"), file.path(getwd(), "README.md"))
