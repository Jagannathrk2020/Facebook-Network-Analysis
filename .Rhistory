install.packages("xtable")
install.packages("party")
install.packages("ggplot2")
install.packages("reshape2")
library("vcd")
data("Federalist")
gf <- goodfit(Federalist, type = "nbinomial")
summary(gf)
plot(gf)
install.packages("Bolstad2")
install.packages("Bolstad")
?chisq.test
.905*200
.905*100
x <- c(.93*200, .905*200)
y <- 200-x
x
y
chisq.test(x, y)
M <- as.table(rbind(c(0.930*200, 0.905*200), c((1-0.930)*200, (1-0.905*200))))
M
M <- as.table(rbind(c(0.930*200, 0.905*200), c((1-0.930)*200, (1-0.905)*200))))
M <- as.table(rbind(c(0.930*200, 0.905*200), c((1-0.930)*200, (1-0.905)*200)))
M
dimnames(M) <- list(choice=c("Improved Sweden", "Actual USA"), party=c("Dem", "Rep"))
M
test <- chisq.test(M)
summary(test)
test
n <- 1000
f <- as.table(rbind(c(0.930, 0.905), c((1-0.930), (1-0.905))))
M <- n * f
show(M)
dimnames(M) <- list(choice=c("Improved Sweden", "Actual USA"), party=c("Dem", "Rep"))
test <- chisq.test(M)
test
Blah blah blah.
z <- rnorm(100)
stem(z)
install.packages("knitr")
x <- 4L
x
is.logical(x)
is.integer(x)
x <- c(4, TRUE)
x
is.integer(x)
is.numeric(x)
x <- c(1,3,5)
y <- c(2,4,6)
rbind(x, y)
is.matrix(rbind(x,y))
x <- list(2, "a", "b", TRUE)
x[[2]]
x[2]
x <- 1:4
y <- 2:3
x+y
x
y
is.integer(x+y)
is.numeric(x+y)
?str
str(x+y)
?is.numeric
require(datasets)
data(mtcars)
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
meanCyl$8
meanCyl[3] - meanCyl[1]
meanCyl <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
meanCyl[3] - meanCyl[1]
meanHP <- sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(meanHP[3] - meanHP[1])
lapply(split(mtcars$hp, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
tapply(split(mtcars$hp, mtcars$cyl), mean)
apply(split(mtcars$hp, mtcars$cyl), mean)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
debug(ls)
ls()
q()
exit()
?opt
oop <- function (med, den, std, ltd, add) {
opt <- tolower(list(med, den, std, ltd, add))
if tolower(opt[[1]]) == "ohsu ppo" {
amt[1] <- 915.40
}
if tolower(opt[[2]]) == "ods dental plan" {
amt[2] <- 156.54
}
amt[5] <- 1.20 * opt[[5]] / 50000  # AD&D coverage For You and Your Family
return(910 - sum(amt))
}
oop("OHSU PPO", "ODS Dental Plan", NULL, NULL, 150000)
grepl(tolower("ODS Dental"), {ods})
?grepl
grepl("ods", tolower("ODS Dental"))
list("x"=3, "y"=4)
c("x"=3, "y"=4)
x <- 1
y <- 2
z <- list("a", 3)
l <- list(x, y, z)
l
l[[1]]
l[[3]]
l[[3]][[1]]
seq(25, 250, 25)
data.frame(seq(25, 250, 25), c(0.00, 1.36, 2.70, 4.06, 5.40, 6.76, 8.10, 9.46, 10.80, 12.16))
lmatrix(seq(25, 250, 25), c(0.00, 1.36, 2.70, 4.06, 5.40, 6.76, 8.10, 9.46, 10.80, 12.16))
matrix(seq(25, 250, 25), c(0.00, 1.36, 2.70, 4.06, 5.40, 6.76, 8.10, 9.46, 10.80, 12.16))
cbind(seq(25, 250, 25), c(0.00, 1.36, 2.70, 4.06, 5.40, 6.76, 8.10, 9.46, 10.80, 12.16))
matrix(seq(25, 250,data.frame("cov"=seq(25, 250, 25), "amt"=c(0.00, 1.36, 2.70, 4.06, 5.40, 6.76, 8.10, 9.46, 10.80, 12.16)) 25), c(0.00, 1.36, 2.70, 4.06, 5.40, 6.76, 8.10, 9.46, 10.80, 12.16))
data.frame("cov"=seq(25, 250, 25), "amt"=c(0.00, 1.36, 2.70, 4.06, 5.40, 6.76, 8.10, 9.46, 10.80, 12.16))
df <- data.frame("a"=seq(1, 5), "b"=seq(100, 500, 100))
df
df[df$a==3, 2]
65*1.05
is.true()
?is.true
68250 / 26
68250 / 26 * .00358
3002.84-2500
oop <- function (med, den, std, ltd, add, life) {
opt <- list(med, den, std, ltd, add, life)
salary <- 68250
benefit <- 910  # OHSU Contribution to Employee Benefits - Employee & Family
amt <- rep(0, length(opt))
if (tolower(opt[[1]]) == "ohsu ppo") {
amt[1] <- 915.40
}
else if (tolower(opt[[1]]) == "ohsu ppo standard") {
amt[1] <- 961.64
}
if (grepl("ods", tolower(opt[[2]]))) {
amt[2] <- 156.54
}
else if (grepl("willamette", tolower(opt[[2]]))) {
amt[2] <- 129.36
}
biweekly <- salary / 26
if (opt[[3]] == 8) {
amt[3] <- 0.01194 * biweekly
}
else if (opt[[3]] == 30) {
amt[3] <- 0.00283  * biweekly
}
else if (opt[[3]] == 90) {
amt[3] <- 0.00074 * biweekly
}
if (opt[[4]] != FALSE) {
amt[4] <- 0.00358 * biweekly
}
if (grepl("self", tolower(opt[[5]][[1]]))) {
amt[5] <- 0.60 * opt[[5]][[2]] / 50
}
else if (grepl("family", tolower(opt[[5]][[1]]))) {
amt[5] <- 1.20 * opt[[5]][[2]] / 50
}
dfLifeEmp <- data.frame("cov"=seq(25, 500, 25), "amt"=c(0.00, 1.36, 2.70, 4.06, 5.40, 6.76, 8.10, 9.46, 10.80, 12.16, 13.50, 14.86, 16.20, 17.56, 18.90, 20.26, 21.60, 22.96, 24.30, 25.66))
dfLifeSpouse <- data.frame("cov"=seq(25, 250, 25), "amt"=c(1.18, 2.36, 3.54, 4.70, 5.88, 7.06, 8.24, 9.40, 10.58, 11.76))
amt[6] <- dfLifeEmp$amt[dfLifeEmp$cov==opt[[6]][[1]]]
if (opt[[6]][[2]] != FALSE) {
amt[6] <- amt[6] + dfLifeSpouse$amt[dfLifeSpouse$cov==opt[[6]][[2]]]
}
if (opt[[6]][[3]] != FALSE) {
amt[6] <- amt[6] + 1.96
}
cost <- sum(amt)
results <- c("Benefit"=benefit, "Cost"=cost, "OOP"=cost-benefit)
details <- amt
names(details) <- c("Med", "Dental", "STD", "LTD", "ADD", "Life")
return(list("results"=results, "details"=details))
}
oop1 <- oop("OHSU PPO",
"ODS Dental Plan",
FALSE,
FALSE,
list("self", 150),
list(25, FALSE, TRUE))
oopBaseline <- oop1[[results]]
oop1
oop1$results
(oop1$results)$oop
(oop1$results)$OOP
oop1$results[3]
?printf
?format
require(ggplot2)
?geom_points
?geom_point
a <- c(7, 2, 7, 2, 9, 8, 0, 14, 21, 1, 9, 8)
r <- c(6, 8, 13, 15, 7, 5, 14, 6, 9, 17, 9, 1)
player <- c("CB", "CL", "LB", "KM", "CD", "CM", "PE", "SP", "EJ", "DR", "MJ", "JS")
df <- data.frame(player, a, r)
require(ggplot2)
ggplot(df, aes(x=a, y=r)) +
geom_points() +
geom_abline() +
scale_x_continuous("Assists") + scale_y_continuous("Rebounds") +
m <- lm(r ~ a, data=df)
m <- lm(r ~ a, data=df)
m
names(m)
m$coefficients
m$coefficients[1]
res <- m$residuals
res
df <- data.frame(df, "pred"=m$fitted.values, "res"=m$residuals)
df
table(df)
require(xtable)
xtable(df, type="html")
?xtable
print(xtable(df), type="html")
require(RCurl, quietly=TRUE)
require(ggplot2, quietly=TRUE)
require(xtable, quietly=TRUE)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEg3aDBNRGR6U2lvdU5idTJkY0dSYVE&single=true&gid=0&output=csv", cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header=TRUE, sep=",", skip=2)
df <- subset(df, Time.Period != "Summary")
df$week <- as.Date(df$Time.Period, format="%m/%d/%Y")
df <- subset(df, week > as.Date("2008-09-30"))
df$month <- as.Date(paste("1", format(df$week, "%b %Y")), format="%d %b %Y")
df$Distance <- as.numeric(df$Distance)
Time <- as.character(df$Time)
Time[Time == ":"] <- "00:00:00"
h <- as.numeric(sapply(strsplit(Time, ":"), "[[", 1))
m <- as.numeric(sapply(strsplit(Time, ":"), "[[", 2))
s <- as.numeric(sapply(strsplit(Time, ":"), "[[", 3))
is.incorrect <- s == 0
s[is.incorrect] <- m[is.incorrect]
m[is.incorrect] <- h[is.incorrect]
h[is.incorrect] <- 0
df$hours <- h + (m / 60) + (s / (60 * 60))
head(df)
?ts
ts(df)
tsWeekly <- ts(df)
names(tsWeekly)
tsWeekly
head(tsWeekly)
head(df)
?ar
ar(df$Distance)
t <- df$Distance[order(length(df$Distance):1)]
t
cbind(t, df$Distance)
head(cbind(t, df$Distance))
tail(cbind(t, df$Distance))
m1 <- ar(t)
summary(m1)
m1
pred(m1)
predict(m1)
names(m1)
pred <- predict(m1)
pred
m2 <- arima(t)
m2
summary(m2)
names(m2)
predict(m2)
plot(m1)
predict(m1, n.ahead=4)
predict(m2, n.ahead=4)
predict(m1, n.ahead=12)$pred
predict(m2, n.ahead=12)$pred
predict(m1, n.ahead=24)$pred
predict(m1, n.ahead=52)$pred
predict(m2, n.ahead=52)$pred
?decompose
decompose(t)
t
t <- ts(t)
t
decompose(t)
plot(t)
?ts
as.ts(t)
?decompose
stl(t)
?get
?quote
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEh5azZuRGVYWnVkem0wck1WVEwyZ0E&single=true&gid=0&output=csv", cainfo=system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header=TRUE, sep=",")
df$date <- as.Date(df$date, format="%m/%d/%Y")
df$year <- as.integer(format(df$date, format="%Y"))
df$category <- rep(NA, length(df$distance))
df$category[df$distance == "Marathon"] <- "Marathon"
df$category[df$distance != "Marathon"] <- "Ultra"
df$km[df$distance == "Marathon"] <- 26.2 * 1.60934
df$distance <- as.character(df$distance)
is.km <- grepl("km", tolower(df$distance))
is.mi <- grepl("mi", tolower(df$distance))
list.km <- strsplit(df$distance[is.km], " ")
list.mi <- strsplit(df$distance[is.mi], " ")
df$km[is.km] <- as.numeric(sapply(list.km, "[[", 1))
df$km[is.mi] <- as.numeric(sapply(list.mi, "[[", 1)) * 1.60934
df <- subset(df, select=-c(distance))
head(df)
require(RCurl, quietly=TRUE)
require(ggplot2, quietly=TRUE)
require(xtable, quietly=TRUE)
url <- getURL("https://docs.google.com/spreadsheet/pub?key=0ApyhYsT8Gi-EdEh5azZuRGVYWnVkem0wck1WVEwyZ0E&single=true&gid=0&output=csv", cainfo=system.file("CurlSSL", "cacert.pem", package = "RCurl"))
df <- read.csv(textConnection(url), header=TRUE, sep=",")
df$date <- as.Date(df$date, format="%m/%d/%Y")
df$year <- as.integer(format(df$date, format="%Y"))
df$category <- rep(NA, length(df$distance))
df$category[df$distance == "Marathon"] <- "Marathon"
df$category[df$distance != "Marathon"] <- "Ultra"
df$km[df$distance == "Marathon"] <- 26.2 * 1.60934
df$distance <- as.character(df$distance)
is.km <- grepl("km", tolower(df$distance))
is.mi <- grepl("mi", tolower(df$distance))
list.km <- strsplit(df$distance[is.km], " ")
list.mi <- strsplit(df$distance[is.mi], " ")
df$km[is.km] <- as.numeric(sapply(list.km, "[[", 1))
df$km[is.mi] <- as.numeric(sapply(list.mi, "[[", 1)) * 1.60934
df <- subset(df, select=-c(distance))
head(df)
df$count <- rep(1, nrow(df))
aggRaces <- aggregate(count ~ surface + year, data=df, sum)
isRoad  <- aggRaces$surface=="Road"
isTrail <- aggRaces$surface=="Trail"
aggRaces$cumsum[isRoad ] <- cumsum(aggRaces$count[isRoad ])
aggRaces$cumsum[isTrail] <- cumsum(aggRaces$count[isTrail])
print(xtable(aggRaces, digits=0), type="html")
maxy <- 10 * ceiling(sum(df$count) / 10)
ggplot(aggRaces, aes(x=year, weight=cumsum, fill=surface)) +
geom_bar() +
labs(title="Surface", x="Year", y="Cumulative number of races", color="") +
scale_y_continuous(limits=c(0, maxy)) +
theme(legend.position="top")
df$count <- rep(1, nrow(df))
aggRaces <- aggregate(count ~ surface + year, data=df, sum)
isRoad  <- aggRaces$surface=="Road"
isTrail <- aggRaces$surface=="Trail"
aggRaces$year <- factor(aggRaces$year)
aggRaces$cumsum[isRoad ] <- cumsum(aggRaces$count[isRoad ])
aggRaces$cumsum[isTrail] <- cumsum(aggRaces$count[isTrail])
print(xtable(aggRaces, digits=0), type="html")
maxy <- 10 * ceiling(sum(df$count) / 10)
ggplot(aggRaces, aes(x=year, weight=cumsum, fill=surface)) +
geom_bar() +
labs(title="Surface", x="Year", y="Cumulative number of races", color="") +
scale_y_continuous(limits=c(0, maxy)) +
theme(legend.position="top")
df$count <- rep(1, nrow(df))
aggRaces <- aggregate(count ~ category + year, data=df, sum)
isMarathon <- aggRaces$category=="Marathon"
isUltra    <- aggRaces$category=="Ultra"
aggRaces$year <- factor(aggRaces$year)
aggRaces$cumsum[isMarathon] <- cumsum(aggRaces$count[isMarathon])
aggRaces$cumsum[isUltra   ] <- cumsum(aggRaces$count[isUltra   ])
print(xtable(aggRaces, digits=0), type="html")
maxy <- 10 * ceiling(sum(df$count) / 10)
ggplot(aggRaces, aes(x=year, weight=cumsum, color=category)) +
geom_bar() +
labs(title="Distance", x="Year", y="Cumulative number of races", color="") +
scale_y_continuous(limits=c(0, maxy)) +
theme(legend.position="top")
df$count <- rep(1, nrow(df))
aggRaces <- aggregate(count ~ category + year, data=df, sum)
isMarathon <- aggRaces$category=="Marathon"
isUltra    <- aggRaces$category=="Ultra"
aggRaces$year <- factor(aggRaces$year)
aggRaces$cumsum[isMarathon] <- cumsum(aggRaces$count[isMarathon])
aggRaces$cumsum[isUltra   ] <- cumsum(aggRaces$count[isUltra   ])
print(xtable(aggRaces, digits=0), type="html")
maxy <- 10 * ceiling(sum(df$count) / 10)
ggplot(aggRaces, aes(x=year, weight=cumsum, fill=category)) +
geom_bar() +
labs(title="Distance", x="Year", y="Cumulative number of races", color="") +
scale_y_continuous(limits=c(0, maxy)) +
theme(legend.position="top")
setwd("~/Dropbox/Sandbox/Facebook")
require(igraph, quietly=TRUE)
require(ggplot2, quietly=TRUE)
require(xtable, quietly=TRUE)
require(RColorBrewer, quietly=TRUE)
FB <- read.graph(file="ChanFacebook.gml", format="gml")
listName <- strsplit(V(FB)$label, " ")
nameF <- sapply(listName, head, 1)
nameL <- sapply(listName, tail, 1)
initF <- substr(nameF, 1, 2)
initL <- substr(nameL, 1, 1)
initials <- paste(initF, initL, sep="")
deg <- degree(FB)
summary(deg)
lim <- sort(deg, decreasing=TRUE)[round(vcount(FB) * 0.05)]
top <- data.frame("Name"=V(FB)$label, "Degree"=deg)
top <- subset(top, deg >= lim)
top <- top[order(top$Degree, decreasing=TRUE),]
print(xtable(top, digits=0), type="html", include.rownames=FALSE)
close <- closeness(FB)
summary(close)
btwn <- betweenness(FB)
summary(btwn)
qplot(btwn, binwidth=1000)
lim <- sort(btwn, decreasing=TRUE)[round(vcount(FB) * 0.05)]
top <- data.frame("Label"=initials, "Name"=V(FB)$label, "Betweenness"=btwn)
top <- subset(top, btwn >= lim)
top <- top[order(top$Betweenness, decreasing=TRUE),]
print(xtable(top, digits=0), type="html", include.rownames=FALSE)
rsq <- format(cor(deg, btwn) ^2, digits=3)
cntrl <- data.frame(deg, btwn, close)
ggplot(cntrl, aes(x=deg, y=btwn)) +
geom_jitter(alpha=1/2) +
scale_y_log10() +
labs(x="Degree", y="Betweenness") +
annotate("text", label=paste("R-sq =", rsq), x=30, y=1)
comm <- edge.betweenness.community(FB)
sizes(comm)
ncomm <- length(sizes(comm)[sizes(comm)>4])
comm <- edge.betweenness.community(FB)
sizes(comm)
ncomm <- length(sizes(comm)[sizes(comm)>4])
head(listname)
head(listName)
name <- as.vector(listName)
head(name)
name <- unlist(listNames)
name <- unlist(listName)
head(name)
head(data.frame(listName))
head(as.data.frame(listName))
nameM <- sapply(listName, 2, 1)
nameM <- sapply(listName, "[[", 2)
head(nameM)
